#!/bin/bash 
#
# dup-file-del:	Compare files in source and target directory recursively,
#				Duplicate files will be deleted from target directory
#
# Change log:
#
#	v0.0	2021-09-29, Rewrite of original script.
#	v0.1	Fix empty directory detect error
#
# ====================================
#
# Copyright (C) 2021 Plato Leung <PoPoutdoor@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# ====================================
#
# Editor:	tab=4 for code, right-margin=132 
#			tab=8 for 'help' display, right-margin=80
#
# ====================================

# parse command line
while (( "$#" )); do
	case "$1" in
		-y)
			confirm='y'
			shift
		;;
		-h)
			echo "Usage: $(basename $0) [-y] [--help] [ref dir] [target dir]

"
			exit
		;;
		--help)
			# tab: 8 for console display
			echo "Usage: $(basename $0) [opts] [source directory] [target directory]

	    -y	Answer 'yes' to delete file(s) prompt, i.e. run script in batch mode.

	    -h|--help	This help text.

	directory:

	    reference directory contains files to compared with, default to current directory.
	    taarget directory contains files to be deleted if duplicated, default to current directory.

"
			exit
		;;
		-*|--*=) # unsupported flags
			echo "Error: Unsupported option $1" >&2
			exit 1
		;;
		*) # preserve positional arguments
			[[ -z "$ref_dir" ]] && ref_dir="$1" || ref_dir+=" $1"
			shift
		;;
	esac
done

# set positional arguments in their proper place
eval set -- "$ref_dir"

# use FIRST non-opts as source dir, SECOND as work dir
ref_dir=`realpath "${1:-./}"` || exit 1
clean_dir=`realpath "${2:-./}"` || exit 1

# validate both directory 
if [[ "$ref_dir" == "$clean_dir" ]]; then
	echo 'Reference and target directory are identical, abort!'
	exit 1
fi
if [[ ! -e "$ref_dir" || ! -e "$clean_dir" ]]; then
	echo 'Reference/target directory not exist, abort!'
	exit 1
fi
if [[ `find "$ref_dir" "$clean_dir" -empty -type d | wc -l` -gt 0 ]]; then
	echo 'Reference/target directory empty, abort!'
	exit 1
fi

echo "Reference: $ref_dir"
echo "Target: $clean_dir"

# match file size first, empty/link file skipped
files=`find "$ref_dir" "$clean_dir" -not -empty -type f -print0 | xargs -0 stat --printf="%s %n\n"  | sort -n -k1,2` 

# group processing by filesize
del_files=''
fz=`echo "$files" | cut -d ' ' -f1 | sort -n -u -r`

for f in $fz; do
	del_tmp=`echo "$files" | grep "^$f " | cut -d ' ' -f2-`
	# skip if file list only contains files from ${ref_dir}
	[[ `echo "$del_tmp" | grep -v "${ref_dir%/.*}/" | wc -l` -eq 0 ]] && continue
	# skip if file list only contains files from ${clean_dir}
	[[ `echo "$del_tmp" | grep -v "${clean_dir%/.*}/" | wc -l` -eq 0 ]] && continue
	# match sha1sum
	del_tmp_cs=`echo "$del_tmp" | tr '\n' '\0' | xargs -0 sha1sum`
	cs=`echo "$del_tmp_cs" | cut -d ' ' -f1 | sort -u`
	for m in $cs; do
		cs_tmp=`echo "$del_tmp_cs" | grep "^$m " | cut -b43-` 
		# check for files in both dir
		[[ `echo -e "$cs_tmp" | wc -l` -ge 2 ]] || continue
		[[ `echo -e "$cs_tmp" | grep -av "$ref_dir" | wc -l` -eq 0 ]] && continue
		del_tmp_out=`echo -e "$cs_tmp" | grep -av "$ref_dir"`
		[[ -z "$del_files" ]] && del_files="$del_tmp_out" || del_files+="\n$del_tmp_out"
	done
done

if [ -z "$del_files" ]; then
	echo 'Duplicate file not found.'; exit
fi

# prepare to delete duplicated files
fc=$(echo -e "$del_files" | wc -l)
echo -e "\nTo be deleted files:\n\n$del_files\n\nTotal $fc file(s)\n"
# delete files
if [[ -z "$confirm" ]]; then
	read -p 'Are you sure to delete above files (y/n)? ' -n1 answer
	echo
	[[ $answer = [yY] ]] || exit
fi

echo -e "$del_files" | tr '\n' '\0'  | xargs -0 rm -f

# cleanup empty directories
find "$clean_dir" -mindepth 1 -depth -type d -empty -delete

# prompt zero-byte files
if [ `find "$clean_dir" -empty -type f | wc -l` -ne 0 ]; then
	echo -e "\nYou may like to remove following empty file(s):\n"
	find "$clean_dir" -empty -type f -print0 | xargs -0 stat --printf='%n\n'
	echo -e "\n"
fi

echo "Done!" 
